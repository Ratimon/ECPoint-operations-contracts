//SPDX-License-Identifier: MIT
pragma solidity =0.8.20;

import {Test, console2, stdError} from "@forge-std/Test.sol";
import {R1CSVerifier} from "@main/R1CSVerifier.sol";

contract R1CSVerifierTest is Test {
    string mnemonic = "test test test test test test test test test test test junk";
    uint256 deployerPrivateKey = vm.deriveKey(mnemonic, "m/44'/60'/0'/0/", 1); //  address = 0x70997970C51812dc3A010C7d01b50e0d17dc79C8

    address deployer = vm.addr(deployerPrivateKey);
    address alice = makeAddr("Alice");

    R1CSVerifier verifier;

    function setUp() public {
        vm.startPrank(deployer);

        vm.deal(deployer, 1 ether);
        vm.label(deployer, "Deployer");

        verifier = new R1CSVerifier();
        vm.label(address(verifier), "Verifier");

        vm.stopPrank();
    }

    // 1st: (1)x* (1)x + (-1)v1 = 0
    function test_verify_one() external {
        // poetry run pytest tests-python/test_r1cs_verifier.py
        // # Our witness vector is: [1 out x y v1 v2 v3 v4]
        // w  [ 1 22  1  2  1  4  4  4]

        // encrypted : X_1 = 1
        // X1 (1, 2)
        R1CSVerifier.G1Point memory X_1 = R1CSVerifier.G1Point({X: uint256(1), Y: uint256(2)});

        // encrypted : X_2 = 1
        // X_2 ((10857046999023057135944570762232829481370756359578518086990519993285655852781, 11559732032986387107991004021392285783925812861821192530917403151452391805634), (8495653923123431417604973247489272438418190587263600148770280649306958101930, 4082367875863433681332203403145435568316851327593401208105741076214120093531))
        R1CSVerifier.G2Point memory X_2 = R1CSVerifier.G2Point({
            X: [
                uint256(11559732032986387107991004021392285783925812861821192530917403151452391805634),
                uint256(10857046999023057135944570762232829481370756359578518086990519993285655852781)
            ],
            Y: [
                uint256(4082367875863433681332203403145435568316851327593401208105741076214120093531),
                uint256(8495653923123431417604973247489272438418190587263600148770280649306958101930)
            ]
        });

        // encrypted : V1_1 = 1
        // V1_1 (1, 2)
        R1CSVerifier.G1Point memory V1_1 = R1CSVerifier.G1Point({X: uint256(1), Y: uint256(2)});

        bool isVerified = verifier.verify_one(X_1, X_2, V1_1);
        assertEq(isVerified, true);
    }

    // 2nd: (1)y* (1)y + (-1)v2 = 0
    function test_verify_two() external {
        // poetry run pytest tests-python/test_r1cs_verifier.py
        // # Our witness vector is: [1 out x y v1 v2 v3 v4]
        // w  [ 1 22  1  2  1  4  4  4]

        // encrypted : Y_1 = 2
        // Y_1 (1368015179489954701390400359078579693043519447331113978918064868415326638035, 9918110051302171585080402603319702774565515993150576347155970296011118125764)
        R1CSVerifier.G1Point memory Y_1 = R1CSVerifier.G1Point({
            X: uint256(1368015179489954701390400359078579693043519447331113978918064868415326638035),
            Y: uint256(9918110051302171585080402603319702774565515993150576347155970296011118125764)
        });

        // encrypted : Y_2 = 2
        // Y_2 ((18029695676650738226693292988307914797657423701064905010927197838374790804409, 14583779054894525174450323658765874724019480979794335525732096752006891875705), (2140229616977736810657479771656733941598412651537078903776637920509952744750, 11474861747383700316476719153975578001603231366361248090558603872215261634898))
        R1CSVerifier.G2Point memory Y_2 = R1CSVerifier.G2Point({
            X: [
                uint256(14583779054894525174450323658765874724019480979794335525732096752006891875705),
                uint256(18029695676650738226693292988307914797657423701064905010927197838374790804409)
            ],
            Y: [
                uint256(11474861747383700316476719153975578001603231366361248090558603872215261634898),
                uint256(2140229616977736810657479771656733941598412651537078903776637920509952744750)
            ]
        });

        // encrypted : V2_1 = 4
        // V2_1 (3010198690406615200373504922352659861758983907867017329644089018310584441462, 4027184618003122424972590350825261965929648733675738730716654005365300998076)
        R1CSVerifier.G1Point memory V2_1 = R1CSVerifier.G1Point({
            X: uint256(3010198690406615200373504922352659861758983907867017329644089018310584441462),
            Y: uint256(4027184618003122424972590350825261965929648733675738730716654005365300998076)
        });

        bool isVerified = verifier.verify_two(Y_1, Y_2, V2_1);
        assertEq(isVerified, true);
    }

    // 3rd: (1)v1* (1)v2 + (-1)v3 = 0
    function test_verify_three() external {
        // poetry run pytest tests-python/test_r1cs_verifier.py
        // # Our witness vector is: [1 out x y v1 v2 v3 v4]
        // w  [ 1 22  1  2  1  4  4  4]

        // encrypted : V1_1 = 1
        // V1_1 (1, 2)
        R1CSVerifier.G1Point memory V1_1 = R1CSVerifier.G1Point({X: uint256(1), Y: uint256(2)});

        // encrypted : V2_2 = 4
        // V2_2 ((18936818173480011669507163011118288089468827259971823710084038754632518263340, 18556147586753789634670778212244811446448229326945855846642767021074501673839), (18825831177813899069786213865729385895767511805925522466244528695074736584695, 13775476761357503446238925910346030822904460488609979964814810757616608848118))
        R1CSVerifier.G2Point memory V2_2 = R1CSVerifier.G2Point({
            X: [
                uint256(18556147586753789634670778212244811446448229326945855846642767021074501673839),
                uint256(18936818173480011669507163011118288089468827259971823710084038754632518263340)
            ],
            Y: [
                uint256(13775476761357503446238925910346030822904460488609979964814810757616608848118),
                uint256(18825831177813899069786213865729385895767511805925522466244528695074736584695)
            ]
        });

        // encrypted : V3_1 = 4
        // V3_1 (3010198690406615200373504922352659861758983907867017329644089018310584441462, 4027184618003122424972590350825261965929648733675738730716654005365300998076)
        R1CSVerifier.G1Point memory V3_1 = R1CSVerifier.G1Point({
            X: uint256(3010198690406615200373504922352659861758983907867017329644089018310584441462),
            Y: uint256(4027184618003122424972590350825261965929648733675738730716654005365300998076)
        });

        bool isVerified = verifier.verify_three(V1_1, V2_2, V3_1);
        assertEq(isVerified, true);
    }

    // 4th: (1)x* (1)v2 + (-1)v4 = 0
    function test_verify_four() external {
        // poetry run pytest tests-python/test_r1cs_verifier.py
        // # Our witness vector is: [1 out x y v1 v2 v3 v4]
        // w  [ 1 22  1  2  1  4  4  4]

        // encrypted : X_1 = 1
        // X_1 (1, 2)
        R1CSVerifier.G1Point memory X_1 = R1CSVerifier.G1Point({X: uint256(1), Y: uint256(2)});

        // encrypted : V2_2 = 4
        // V2_2 ((18936818173480011669507163011118288089468827259971823710084038754632518263340, 18556147586753789634670778212244811446448229326945855846642767021074501673839), (18825831177813899069786213865729385895767511805925522466244528695074736584695, 13775476761357503446238925910346030822904460488609979964814810757616608848118))
        R1CSVerifier.G2Point memory V2_2 = R1CSVerifier.G2Point({
            X: [
                uint256(18556147586753789634670778212244811446448229326945855846642767021074501673839),
                uint256(18936818173480011669507163011118288089468827259971823710084038754632518263340)
            ],
            Y: [
                uint256(13775476761357503446238925910346030822904460488609979964814810757616608848118),
                uint256(18825831177813899069786213865729385895767511805925522466244528695074736584695)
            ]
        });

        // encrypted : V4_1 = 4
        // V4_1 (3010198690406615200373504922352659861758983907867017329644089018310584441462, 4027184618003122424972590350825261965929648733675738730716654005365300998076)
        R1CSVerifier.G1Point memory V4_1 = R1CSVerifier.G1Point({
            X: uint256(3010198690406615200373504922352659861758983907867017329644089018310584441462),
            Y: uint256(4027184618003122424972590350825261965929648733675738730716654005365300998076)
        });

        bool isVerified = verifier.verify_four(X_1, V2_2, V4_1);
        assertEq(isVerified, true);
    }

    function test_verify_five() external {
        // poetry run pytest tests-python/test_r1cs_verifier.py
        // # Our witness vector is: [1 out x y v1 v2 v3 v4]
        // w  [ 1 22  1  2  1  4  4  4]

        // encrypted : V1_1 = 1
        // V1_1 (1, 2)
        R1CSVerifier.G1Point memory V1_1 = R1CSVerifier.G1Point({X: uint256(1), Y: uint256(2)});

        // encrypted : X_2 = 1
        // X_2 ((10857046999023057135944570762232829481370756359578518086990519993285655852781, 11559732032986387107991004021392285783925812861821192530917403151452391805634), (8495653923123431417604973247489272438418190587263600148770280649306958101930, 4082367875863433681332203403145435568316851327593401208105741076214120093531))
        R1CSVerifier.G2Point memory X_2 = R1CSVerifier.G2Point({
            X: [
                uint256(11559732032986387107991004021392285783925812861821192530917403151452391805634),
                uint256(10857046999023057135944570762232829481370756359578518086990519993285655852781)
            ],
            Y: [
                uint256(4082367875863433681332203403145435568316851327593401208105741076214120093531),
                uint256(8495653923123431417604973247489272438418190587263600148770280649306958101930)
            ]
        });

        // encrypted : OUT_1 = 22
        // (15727213640762128376977790067421582934261473041285176203873887513123693207669, 19144605879150273414601776380457513460094228635793066771119021730299648624873)
        R1CSVerifier.G1Point memory OUT_1 = R1CSVerifier.G1Point({
            X: uint256(15727213640762128376977790067421582934261473041285176203873887513123693207669),
            Y: uint256(19144605879150273414601776380457513460094228635793066771119021730299648624873)
        });

        // encrypted : Y_1 = 2
        // Y_1 (1368015179489954701390400359078579693043519447331113978918064868415326638035, 9918110051302171585080402603319702774565515993150576347155970296011118125764)
        R1CSVerifier.G1Point memory Y_1 = R1CSVerifier.G1Point({
            X: uint256(1368015179489954701390400359078579693043519447331113978918064868415326638035),
            Y: uint256(9918110051302171585080402603319702774565515993150576347155970296011118125764)
        });

        // encrypted : V3_1 = 4
        // V3_1 (3010198690406615200373504922352659861758983907867017329644089018310584441462, 4027184618003122424972590350825261965929648733675738730716654005365300998076)
        R1CSVerifier.G1Point memory V3_1 = R1CSVerifier.G1Point({
            X: uint256(3010198690406615200373504922352659861758983907867017329644089018310584441462),
            Y: uint256(4027184618003122424972590350825261965929648733675738730716654005365300998076)
        });

        // encrypted : V4_1 = 4
        // V4_1 (3010198690406615200373504922352659861758983907867017329644089018310584441462, 4027184618003122424972590350825261965929648733675738730716654005365300998076)
        R1CSVerifier.G1Point memory V4_1 = R1CSVerifier.G1Point({
            X: uint256(3010198690406615200373504922352659861758983907867017329644089018310584441462),
            Y: uint256(4027184618003122424972590350825261965929648733675738730716654005365300998076)
        });

        bool isVerified = verifier.verify_five(V1_1, X_2, OUT_1, Y_1, V3_1, V4_1);
        assertEq(isVerified, true);
    }
}
